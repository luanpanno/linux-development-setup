{
  "React Component": {
    "prefix": "rc",
    "body": [
      "const ${TM_DIRECTORY/^.+\\/(.*)$/$1/} = () => {",
      "  return (",
      "    $0",
      "  );",
      "}",
      "",
      "export default ${TM_DIRECTORY/^.+\\/(.*)$/$1/}"
    ]
  },
  "React Component With Styled Components": {
    "prefix": "rcsc",
    "body": [
      "import { Container } from './styles';",
      "",
      "const ${TM_DIRECTORY/^.+\\/(.*)$/$1/} = () => {",
      "  return (",
      "    $0",
      "  );",
      "}",
      "",
      "export default ${TM_DIRECTORY/^.+\\/(.*)$/$1/}"
    ]
  },
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "const ${TM_DIRECTORY/^.+\\/(.*)$/$1/}: React.FC = () => {",
      "  return (",
      "    $0",
      "  );",
      "}",
      "",
      "export default ${TM_DIRECTORY/^.+\\/(.*)$/$1/}"
    ]
  },
  "React Functional Component With Props": {
    "prefix": "rfcp",
    "body": [
      "interface Props {}",
      "",
      "const ${TM_DIRECTORY/^.+\\/(.*)$/$1/}: React.FC<Props> = () => {",
      "  return (",
      "    $0",
      "  );",
      "}",
      "",
      "export default ${TM_DIRECTORY/^.+\\/(.*)$/$1/}"
    ]
  },
  "React Context": {
    "prefix": "rctx",
    "body": [
      "import { createContext } from 'react';",
      "",
      "interface Context {",
      " $2: $3;",
      "}",
      "",
      "const $1Context = createContext<Context>({} as Context);",
      "",
      "export const $1Provider: React.FC = ({ children }) => {",
      " $0",
      " return (",
      " <$1Context.Provider value={{} as Context}>",
      " {children}",
      " </$1Context.Provider>",
      " );",
      "};"
    ]
  },
  "Import Container from Styles": {
    "prefix": "icfs",
    "body": ["import { Container } from './styles';"]
  },
  "useEffect": {
    "prefix": "useEff",
    "body": ["useEffect(() => {", "$1", "}, []);"]
  },
  "useCallback": {
    "prefix": "useCall",
    "body": ["const $1 = useCallback(() => {", "$2", "}, []);"]
  },
  "Console Log": {
    "prefix": "log",
    "body": ["console.log('$1', $1)"]
  },
  "mountedUseEffect": {
    "prefix": "mountedUseEff",
    "body": [
      "const mounted = useRef(true);",
      "",
      "useEffect(() => {",
      "  return () => {",
      "     mounted.current = false;",
      "  };",
      "}, []);"
    ]
  }
}
